name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: ["gcc", "clang"]
        build_type: ["Debug", "Release"]
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake valgrind lcov
    
    - name: Setup huff dependency
      run: |
        mkdir -p ../huff/include/huff
        # Create minimal huff.h for testing
        echo '#ifndef HUFF_H' > ../huff/include/huff/huff.h
        echo '#define HUFF_H' >> ../huff/include/huff/huff.h
        echo 'typedef struct huff_table huff_table_t;' >> ../huff/include/huff/huff.h
        echo '#endif' >> ../huff/include/huff/huff.h
    
    - name: Configure
      env:
        CC: ${{ matrix.compiler }}
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DDEFL_USE_TEST=ON
    
    - name: Build
      run: cmake --build build --parallel
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --verbose
    
    - name: Memory leak check (Debug only)
      if: matrix.build_type == 'Debug'
      run: |
        cd build
        valgrind --leak-check=full --error-exitcode=1 ./test/test_files
    
    - name: Fuzz test
      if: matrix.compiler == 'clang' && matrix.build_type == 'Debug'
      run: |
        cd build
        make fuzz_quick

  test-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: brew install cmake
    
    - name: Setup huff dependency
      run: |
        mkdir -p ../huff/include/huff
        echo '#ifndef HUFF_H' > ../huff/include/huff/huff.h
        echo '#define HUFF_H' >> ../huff/include/huff/huff.h
        echo 'typedef struct huff_table huff_table_t;' >> ../huff/include/huff/huff.h
        echo '#endif' >> ../huff/include/huff/huff.h
    
    - name: Configure and build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DDEFL_USE_TEST=ON
        make -j$(sysctl -n hw.ncpu)
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure

  test-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Setup huff dependency
      shell: bash
      run: |
        mkdir -p ../huff/include/huff
        echo '#ifndef HUFF_H' > ../huff/include/huff/huff.h
        echo '#define HUFF_H' >> ../huff/include/huff/huff.h
        echo 'typedef struct huff_table huff_table_t;' >> ../huff/include/huff/huff.h
        echo '#endif' >> ../huff/include/huff/huff.h
    
    - name: Configure
      run: |
        mkdir build
        cd build
        cmake .. -DDEFL_USE_TEST=ON
    
    - name: Build
      run: cmake --build build --config Release
    
    - name: Run tests
      run: |
        cd build
        ctest -C Release --output-on-failure

  coverage:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake lcov
    
    - name: Setup huff dependency
      run: |
        mkdir -p ../huff/include/huff
        echo '#ifndef HUFF_H' > ../huff/include/huff/huff.h
        echo '#define HUFF_H' >> ../huff/include/huff/huff.h
        echo 'typedef struct huff_table huff_table_t;' >> ../huff/include/huff/huff.h
        echo '#endif' >> ../huff/include/huff/huff.h
    
    - name: Configure with coverage
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug \
                 -DDEFL_USE_TEST=ON \
                 -DCMAKE_C_FLAGS="--coverage -fprofile-arcs -ftest-coverage"
    
    - name: Build and test
      run: |
        cd build
        make
        ctest
    
    - name: Generate coverage report
      run: |
        cd build
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/test/*' --output-file coverage_filtered.info
        lcov --list coverage_filtered.info
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./build/coverage_filtered.info
        fail_ci_if_error: true

  sanitizers:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitizer: ["address", "undefined", "thread"]
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake clang
    
    - name: Setup huff dependency
      run: |
        mkdir -p ../huff/include/huff
        echo '#ifndef HUFF_H' > ../huff/include/huff/huff.h
        echo '#define HUFF_H' >> ../huff/include/huff/huff.h
        echo 'typedef struct huff_table huff_table_t;' >> ../huff/include/huff/huff.h
        echo '#endif' >> ../huff/include/huff/huff.h
    
    - name: Configure with sanitizer
      run: |
        mkdir build
        cd build
        CC=clang cmake .. -DCMAKE_BUILD_TYPE=Debug \
                         -DDEFL_USE_TEST=ON \
                         -DCMAKE_C_FLAGS="-fsanitize=${{ matrix.sanitizer }} -fno-omit-frame-pointer"
    
    - name: Build
      run: cmake --build build
    
    - name: Run tests with sanitizer
      run: |
        cd build
        ASAN_OPTIONS=detect_leaks=1 ctest
